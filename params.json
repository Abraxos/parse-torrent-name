{"name":"Parse-torrent-name","tagline":"Extract media information from a filename","body":"# parse-torrent-name ![Build Status](https://travis-ci.org/divijbindlish/parse-torrent-name.svg?branch=master)\r\n\r\n> Extract media information from a filename\r\n\r\nA python port of [Jānis](https://github.com/jzjzjzj)' awesome\r\n[library](http  s://github.com/jzjzjzj/parse-torrent-name) written in \r\njavascript.\r\n\r\nExtract all possible media information present in filenames. Multiple regex \r\nrules are applied on filename string each of which extracts correponding\r\ninformation from the filename. If a regex rule matches, the corresponding part\r\nis removed from the filename. In the end, the remaining part is taken as the\r\ntitle of the content.\r\n\r\n## Why?\r\n\r\nOnline APIs by providers like\r\n[TMDb](https://www.themoviedb.org/documentation/api),\r\n[TVDb](http://thetvdb.com/wiki/index.php?title=Programmers_API) and\r\n[OMDb](http://www.omdbapi.com/) don't react to well to search\r\nqueries which include any kind of extra information. To get proper results from\r\nthese APIs, only the title of the content should be provided as the search\r\nquery where this library comes into play. The accuracy of the results can be\r\nimproved by passing in the year which can also be extracted using this library.\r\n\r\n## Usage\r\n\r\n```py\r\nimport PTN\r\n\r\nPTN.parse('A freakishly cool movie or TV episode')\r\n```\r\n\r\nPTN works well for both movies and TV episodes. All meaningful information is\r\nextracted and returned together in a dictionary. The text which could not be\r\nparsed is returned in the `excess` field.\r\n\r\n### Movies\r\n\r\n```py\r\nPTN.parse('San Andreas 2015 720p WEB-DL x264 AAC-JYK')\r\n# {\r\n#     'group': 'JYK',\r\n#     'title': 'San Andreas',\r\n#     'resolution': '720p',\r\n#     'codec': 'x264',\r\n#     'year':  '2015',\r\n#     'audio': 'AAC',\r\n#     'quality': 'WEB-DL'\r\n# }\r\n\r\nPTN.parse('The Martian 2015 540p HDRip KORSUB x264 AAC2 0-FGT')\r\n# {\r\n#     'group': '0-FGT',\r\n#     'title': 'The Martian',\r\n#     'resolution': '540p',\r\n#     'excess': ['KORSUB', '2'],\r\n#     'codec': 'x264',\r\n#     'year': 2015,\r\n#     'audio': 'AAC',\r\n#     'quality': 'HDRip'\r\n# }\r\n```\r\n\r\n### TV episodes \r\n\r\n```py\r\nPTN.parse('Mr Robot S01E05 HDTV x264-KILLERS[ettv]')\r\n# {\r\n#     'episode': 5,\r\n#     'season': 1,\r\n#     'title': 'Mr Robot',\r\n#     'codec': 'x264',\r\n#     'group':  'KILLERS[ettv]'\r\n#     'quality': 'HDTV'\r\n# }\r\n\r\nPTN.parse('friends.s02e01.720p.bluray-sujaidr')\r\n# {\r\n#     'episode': 1,\r\n#     'season': 2,\r\n#     'title': 'friends',\r\n#     'resolution': '720p',\r\n#     'group': 'sujaidr',\r\n#     'quality': 'bluray'    \r\n# }\r\n```\r\n\r\n### Parts extracted\r\n\r\n* audio\r\n* codec\r\n* container\r\n* episode\r\n* episodeName\r\n* excess\r\n* extended\r\n* garbage\r\n* group\r\n* hardcoded\r\n* language\r\n* proper\r\n* quality\r\n* region\r\n* repack\r\n* resolution\r\n* season\r\n* title\r\n* website\r\n* widescreen\r\n* year\r\n\r\n## Install\r\n\r\n### Automatic\r\n\r\nPTN can be installed automatically using `easy_install` or `pip`.\r\n\r\n```sh\r\n$ easy_install parse-torrent-name\r\n```\r\n\r\nOR \r\n\r\n```sh\r\n$ pip install parse-torrent-name\r\n```\r\n\r\nNote that these commands might require `sudo` permission depending on whether\r\na virtual environment is used or not.\r\n\r\n### Manual\r\n\r\nFirst clone the repository.\r\n\r\n```sh\r\n$ git clone https://github.com/divijbindlish/parse-torrent-name PTN && cd PTN\r\n```\r\n\r\nAnd run the command for installing the package.\r\n\r\n```sh\r\n$ python setup.py install\r\n```\r\n\r\n## Contributing\r\n\r\nTake a look at the open\r\n[issues](https://github.com/jzjzjzj/parse-torrent-name/issues) on the original\r\nproject and submit a PR!\r\n\r\n## License\r\n\r\nMIT © [Divij Bindlish](http://divijbindlish.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}